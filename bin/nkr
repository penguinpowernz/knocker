#!/usr/bin/env ruby

require 'knocker'
require 'fileutils'

name = ARGV[0]

def usage
  <<-EOF
Usage: nkr <pattern-name>
  EOF
end

begin
  raise ArgumentError, "Must provide pattern name" if name.nil? or name.blank?

  pattern = Knocker.pattern(name)
  system pattern.knock_command
  
  pattern.post_commands.each do |cmd|
    system cmd
  end
rescue Knocker::Errors::ConfigNotFound
  print "No config found, create one at #{Knocker.config}? [y/n]: "
  
  if STDIN.gets.match /y/i
    FileUtils.mkdir_p File.dirname(Knocker.config)
    FileUtils.touch Knocker.config
    puts "Created knocker config file"
  else
    abort "No config file... quitting"
  end
rescue ArgumentError => e
  puts "ERROR: #{e.message}"
  abort usage
rescue Knocker::Errors::PatternNotFound
  abort "ERROR: No such pattern #{name}"
rescue Knocker::Errors::NoHostSpecified
  abort "ERROR: No host specified in pattern #{name}"
rescue Knocker::Errors::NoKnockSpecified
  abort "ERROR: No port-knocks specified in pattern #{name}"
rescue Knocker::Errors::InvalidProtocol => e
  abort "ERROR: Invalid protocol #{e.message} in pattern #{name}"
rescue Knocker::Errors::InvalidPort => e
  abort "ERROR: Invalid port #{e.message} in pattern #{name}"
end
